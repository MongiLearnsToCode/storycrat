import jsPDF from 'jspdf'
import { Story } from './convex-store'

// Theme colors converted from OKLCH to RGB
const theme = {
  primary: [155, 89, 182],      // Primary purple
  secondary: [228, 221, 235],   // Light purple
  muted: [227, 226, 230],       // Light gray
  mutedForeground: [134, 125, 147], // Medium gray
  foreground: [93, 82, 102],    // Dark gray
  background: [249, 248, 250],  // Very light purple
  card: [255, 255, 255],        // White
  border: [215, 210, 220]       // Light border
}

export function exportToTxt(story: Story) {
  const completedBeats = story.beats.filter(beat => beat.completed).length
  const progress = Math.round((completedBeats / story.beats.length) * 100)
  
  let content = ''
  
  // Header with theme styling
  content += '═'.repeat(80) + '\n'
  content += `  ${story.title.toUpperCase()}\n`
  content += '═'.repeat(80) + '\n\n'
  
  // Metadata
  content += `Framework:     ${story.framework.replace('-', ' ').toUpperCase()}\n`
  content += `Progress:      ${completedBeats}/${story.beats.length} beats completed (${progress}%)\n`
  content += `Last Edited:   ${new Date(story.lastEdited).toLocaleDateString('en-US', { 
    weekday: 'long', 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric' 
  })}\n\n`
  
  // Story Structure
  content += '─'.repeat(80) + '\n'
  content += '  STORY STRUCTURE\n'
  content += '─'.repeat(80) + '\n\n'
  
  story.beats.forEach((beat, index) => {
    const status = beat.completed ? '✓' : '○'
    
    content += `${index + 1}. ${beat.title.toUpperCase()} ${status}\n`
    content += `   ${beat.description}\n\n`
    
    if (beat.content) {
      // Format content with proper line breaks
      const lines = beat.content.split('\n')
      lines.forEach(line => {
        if (line.trim()) {
          content += `   ${line.trim()}\n`
        } else {
          content += '\n'
        }
      })
    } else {
      content += '   [This beat has not been written yet]\n'
    }
    content += '\n' + '·'.repeat(60) + '\n\n'
  })
  
  // Characters
  if (story.characters.length > 0) {
    content += '─'.repeat(80) + '\n'
    content += '  CHARACTER PROFILES\n'
    content += '─'.repeat(80) + '\n\n'
    
    story.characters.forEach((char, index) => {
      content += `${index + 1}. ${char.name.toUpperCase()}\n`
      content += `   Role: ${char.role}\n`
      content += `   Description: ${char.description}\n\n`
    })
  }
  
  // Footer
  content += '═'.repeat(80) + '\n'
  content += `  Generated by StoryGenPro on ${new Date().toLocaleDateString()}\n`
  content += '═'.repeat(80) + '\n'
  
  const blob = new Blob([content], { type: 'text/plain;charset=utf-8' })
  const url = URL.createObjectURL(blob)
  const a = document.createElement('a')
  a.href = url
  a.download = `${story.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_story.txt`
  a.click()
  URL.revokeObjectURL(url)
}

export function exportToPdf(story: Story) {
  const pdf = new jsPDF()
  const pageWidth = pdf.internal.pageSize.getWidth()
  const pageHeight = pdf.internal.pageSize.getHeight()
  const margin = 25
  const contentWidth = pageWidth - (margin * 2)
  
  let yPosition = margin
  const completedBeats = story.beats.filter(beat => beat.completed).length
  const progress = Math.round((completedBeats / story.beats.length) * 100)
  
  // Helper function to add new page if needed
  const checkPageBreak = (requiredSpace: number) => {
    if (yPosition + requiredSpace > pageHeight - margin) {
      pdf.addPage()
      yPosition = margin
      return true
    }
    return false
  }
  
  // Helper function to add footer
  const addFooter = () => {
    pdf.setFontSize(9)
    pdf.setTextColor(theme.mutedForeground[0], theme.mutedForeground[1], theme.mutedForeground[2])
    pdf.text('Generated by StoryGenPro', margin, pageHeight - 15)
    pdf.setTextColor(theme.foreground[0], theme.foreground[1], theme.foreground[2])
  }
  
  // Title Page with theme colors
  pdf.setFontSize(28)
  pdf.setFont('helvetica', 'bold')
  pdf.setTextColor(theme.primary[0], theme.primary[1], theme.primary[2])
  const titleLines = pdf.splitTextToSize(story.title, contentWidth - 40)
  const titleHeight = titleLines.length * 14
  pdf.text(titleLines, pageWidth / 2, yPosition + 40, { align: 'center' })
  
  yPosition += titleHeight + 60
  
  // Subtitle
  pdf.setFontSize(16)
  pdf.setFont('helvetica', 'normal')
  pdf.setTextColor(theme.mutedForeground[0], theme.mutedForeground[1], theme.mutedForeground[2])
  pdf.text('Story Beatsheet', pageWidth / 2, yPosition, { align: 'center' })
  
  yPosition += 50
  
  // Metadata Box with theme colors
  pdf.setDrawColor(theme.border[0], theme.border[1], theme.border[2])
  pdf.setFillColor(theme.background[0], theme.background[1], theme.background[2])
  pdf.roundedRect(margin, yPosition, contentWidth, 50, 8, 8, 'FD')
  
  pdf.setFontSize(12)
  pdf.setTextColor(theme.foreground[0], theme.foreground[1], theme.foreground[2])
  pdf.setFont('helvetica', 'bold')
  pdf.text('Framework:', margin + 15, yPosition + 18)
  pdf.text('Progress:', margin + 15, yPosition + 30)
  pdf.text('Last Edited:', margin + 15, yPosition + 42)
  
  pdf.setFont('helvetica', 'normal')
  pdf.setTextColor(theme.primary[0], theme.primary[1], theme.primary[2])
  pdf.text(story.framework.replace('-', ' ').toUpperCase(), margin + 60, yPosition + 18)
  pdf.text(`${completedBeats}/${story.beats.length} beats completed (${progress}%)`, margin + 60, yPosition + 30)
  pdf.text(new Date(story.lastEdited).toLocaleDateString('en-US', { 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric' 
  }), margin + 60, yPosition + 42)
  
  yPosition += 75
  addFooter()
  
  // Story Beats Section
  pdf.addPage()
  yPosition = margin
  
  pdf.setFontSize(20)
  pdf.setFont('helvetica', 'bold')
  pdf.setTextColor(theme.primary[0], theme.primary[1], theme.primary[2])
  pdf.text('Story Structure', margin, yPosition)
  yPosition += 25
  
  story.beats.forEach((beat, index) => {
    const estimatedHeight = 70 + (beat.content ? Math.ceil(beat.content.length / 80) * 5 : 15)
    
    checkPageBreak(estimatedHeight)
    
    // Beat number circle with theme colors
    if (beat.completed) {
      pdf.setFillColor(theme.primary[0], theme.primary[1], theme.primary[2])
    } else {
      pdf.setFillColor(theme.muted[0], theme.muted[1], theme.muted[2])
    }
    pdf.circle(margin + 10, yPosition + 6, 8, 'F')
    
    // Beat number
    pdf.setTextColor(255, 255, 255)
    pdf.setFontSize(11)
    pdf.setFont('helvetica', 'bold')
    pdf.text((index + 1).toString(), margin + 10, yPosition + 9, { align: 'center' })
    
    // Beat title
    pdf.setTextColor(theme.foreground[0], theme.foreground[1], theme.foreground[2])
    pdf.setFontSize(16)
    pdf.setFont('helvetica', 'bold')
    pdf.text(beat.title, margin + 25, yPosition + 9)
    
    yPosition += 20
    
    // Description with theme colors
    pdf.setFontSize(11)
    pdf.setTextColor(theme.mutedForeground[0], theme.mutedForeground[1], theme.mutedForeground[2])
    pdf.setFont('helvetica', 'italic')
    const descLines = pdf.splitTextToSize(beat.description, contentWidth - 25)
    pdf.text(descLines, margin + 25, yPosition)
    yPosition += descLines.length * 6 + 10
    
    // Content
    pdf.setFont('helvetica', 'normal')
    pdf.setTextColor(theme.foreground[0], theme.foreground[1], theme.foreground[2])
    if (beat.content) {
      const contentLines = pdf.splitTextToSize(beat.content, contentWidth - 25)
      pdf.text(contentLines, margin + 25, yPosition)
      yPosition += contentLines.length * 6
    } else {
      pdf.setTextColor(theme.mutedForeground[0], theme.mutedForeground[1], theme.mutedForeground[2])
      pdf.setFont('helvetica', 'italic')
      pdf.text('[This beat has not been written yet]', margin + 25, yPosition)
      yPosition += 6
    }
    
    yPosition += 20
    
    // Separator line with theme color
    if (index < story.beats.length - 1) {
      pdf.setDrawColor(theme.border[0], theme.border[1], theme.border[2])
      pdf.line(margin + 25, yPosition, pageWidth - margin, yPosition)
      yPosition += 20
    }
  })
  
  addFooter()
  
  // Characters Section with theme colors
  if (story.characters.length > 0) {
    checkPageBreak(70)
    yPosition += 25
    
    pdf.setFontSize(20)
    pdf.setFont('helvetica', 'bold')
    pdf.setTextColor(theme.primary[0], theme.primary[1], theme.primary[2])
    pdf.text('Character Profiles', margin, yPosition)
    yPosition += 30
    
    story.characters.forEach((char) => {
      checkPageBreak(50)
      
      // Character name
      pdf.setFontSize(14)
      pdf.setFont('helvetica', 'bold')
      pdf.setTextColor(theme.foreground[0], theme.foreground[1], theme.foreground[2])
      pdf.text(char.name, margin, yPosition)
      
      // Role badge with theme colors
      pdf.setFillColor(theme.secondary[0], theme.secondary[1], theme.secondary[2])
      pdf.setDrawColor(theme.border[0], theme.border[1], theme.border[2])
      const roleWidth = pdf.getTextWidth(char.role) + 12
      pdf.roundedRect(pageWidth - margin - roleWidth, yPosition - 10, roleWidth, 16, 4, 4, 'FD')
      pdf.setFontSize(10)
      pdf.setTextColor(theme.primary[0], theme.primary[1], theme.primary[2])
      pdf.setFont('helvetica', 'bold')
      pdf.text(char.role, pageWidth - margin - roleWidth + 6, yPosition - 2)
      
      yPosition += 18
      
      // Description
      pdf.setFontSize(11)
      pdf.setTextColor(theme.foreground[0], theme.foreground[1], theme.foreground[2])
      pdf.setFont('helvetica', 'normal')
      const charLines = pdf.splitTextToSize(char.description, contentWidth)
      pdf.text(charLines, margin, yPosition)
      yPosition += charLines.length * 6 + 20
    })
    
    addFooter()
  }
  
  pdf.save(`${story.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_story.pdf`)
}
