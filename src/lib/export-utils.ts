import jsPDF from 'jspdf'
import { Story } from './convex-store'

export function exportToTxt(story: Story) {
  const completedBeats = story.beats.filter(beat => beat.completed).length
  const progress = Math.round((completedBeats / story.beats.length) * 100)
  
  let content = ''
  
  // Header
  content += '═'.repeat(80) + '\n'
  content += `  ${story.title.toUpperCase()}\n`
  content += '═'.repeat(80) + '\n\n'
  
  // Metadata
  content += `Framework:     ${story.framework.replace('-', ' ').toUpperCase()}\n`
  content += `Progress:      ${completedBeats}/${story.beats.length} beats completed (${progress}%)\n`
  content += `Last Edited:   ${new Date(story.lastEdited).toLocaleDateString('en-US', { 
    weekday: 'long', 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric' 
  })}\n\n`
  
  // Story Structure
  content += '─'.repeat(80) + '\n'
  content += '  STORY STRUCTURE\n'
  content += '─'.repeat(80) + '\n\n'
  
  story.beats.forEach((beat, index) => {
    const status = beat.completed ? '✓' : '○'
    const wordCount = beat.content ? beat.content.trim().split(/\s+/).length : 0
    
    content += `${index + 1}. ${beat.title.toUpperCase()} ${status}\n`
    content += `   ${beat.description}\n`
    if (wordCount > 0) {
      content += `   Word count: ${wordCount}\n`
    }
    content += '\n'
    
    if (beat.content) {
      // Format content with proper line breaks
      const lines = beat.content.split('\n')
      lines.forEach(line => {
        if (line.trim()) {
          content += `   ${line.trim()}\n`
        } else {
          content += '\n'
        }
      })
    } else {
      content += '   [This beat has not been written yet]\n'
    }
    content += '\n' + '·'.repeat(60) + '\n\n'
  })
  
  // Characters
  if (story.characters.length > 0) {
    content += '─'.repeat(80) + '\n'
    content += '  CHARACTER PROFILES\n'
    content += '─'.repeat(80) + '\n\n'
    
    story.characters.forEach((char, index) => {
      content += `${index + 1}. ${char.name.toUpperCase()}\n`
      content += `   Role: ${char.role}\n`
      content += `   Description: ${char.description}\n\n`
    })
  }
  
  // Footer
  content += '═'.repeat(80) + '\n'
  content += `  Generated by StoryGenPro on ${new Date().toLocaleDateString()}\n`
  content += '═'.repeat(80) + '\n'
  
  const blob = new Blob([content], { type: 'text/plain;charset=utf-8' })
  const url = URL.createObjectURL(blob)
  const a = document.createElement('a')
  a.href = url
  a.download = `${story.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_story.txt`
  a.click()
  URL.revokeObjectURL(url)
}

export function exportToPdf(story: Story) {
  const pdf = new jsPDF()
  const pageWidth = pdf.internal.pageSize.getWidth()
  const pageHeight = pdf.internal.pageSize.getHeight()
  const margin = 25
  const contentWidth = pageWidth - (margin * 2)
  
  let yPosition = margin
  const completedBeats = story.beats.filter(beat => beat.completed).length
  const progress = Math.round((completedBeats / story.beats.length) * 100)
  
  // Helper function to add new page if needed
  const checkPageBreak = (requiredSpace: number) => {
    if (yPosition + requiredSpace > pageHeight - margin) {
      pdf.addPage()
      yPosition = margin
      return true
    }
    return false
  }
  
  // Helper function to add footer
  const addFooter = () => {
    const pageNum = pdf.internal.getCurrentPageInfo().pageNumber
    pdf.setFontSize(9)
    pdf.setTextColor(128, 128, 128)
    pdf.text(`Page ${pageNum}`, pageWidth - margin, pageHeight - 15, { align: 'right' })
    pdf.text('Generated by StoryGenPro', margin, pageHeight - 15)
    pdf.setTextColor(0, 0, 0)
  }
  
  // Title Page
  pdf.setFontSize(24)
  pdf.setFont('helvetica', 'bold')
  const titleLines = pdf.splitTextToSize(story.title, contentWidth - 40)
  const titleHeight = titleLines.length * 12
  pdf.text(titleLines, pageWidth / 2, yPosition + 40, { align: 'center' })
  
  yPosition += titleHeight + 60
  
  // Subtitle
  pdf.setFontSize(14)
  pdf.setFont('helvetica', 'normal')
  pdf.setTextColor(100, 100, 100)
  pdf.text('Story Beatsheet', pageWidth / 2, yPosition, { align: 'center' })
  
  yPosition += 40
  
  // Metadata Box
  pdf.setDrawColor(200, 200, 200)
  pdf.setFillColor(248, 249, 250)
  pdf.roundedRect(margin, yPosition, contentWidth, 45, 3, 3, 'FD')
  
  pdf.setFontSize(11)
  pdf.setTextColor(0, 0, 0)
  pdf.setFont('helvetica', 'bold')
  pdf.text('Framework:', margin + 10, yPosition + 15)
  pdf.text('Progress:', margin + 10, yPosition + 25)
  pdf.text('Last Edited:', margin + 10, yPosition + 35)
  
  pdf.setFont('helvetica', 'normal')
  pdf.text(story.framework.replace('-', ' ').toUpperCase(), margin + 50, yPosition + 15)
  pdf.text(`${completedBeats}/${story.beats.length} beats completed (${progress}%)`, margin + 50, yPosition + 25)
  pdf.text(new Date(story.lastEdited).toLocaleDateString('en-US', { 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric' 
  }), margin + 50, yPosition + 35)
  
  yPosition += 70
  addFooter()
  
  // Story Beats Section
  pdf.addPage()
  yPosition = margin
  
  pdf.setFontSize(18)
  pdf.setFont('helvetica', 'bold')
  pdf.setTextColor(0, 0, 0)
  pdf.text('Story Structure', margin, yPosition)
  yPosition += 20
  
  story.beats.forEach((beat, index) => {
    const wordCount = beat.content ? beat.content.trim().split(/\s+/).length : 0
    const estimatedHeight = 60 + (beat.content ? Math.ceil(beat.content.length / 80) * 5 : 10)
    
    checkPageBreak(estimatedHeight)
    
    // Beat number and title
    pdf.setFillColor(beat.completed ? 46, 125, 50 : 158, 158, 158)
    pdf.circle(margin + 8, yPosition + 5, 6, 'F')
    
    pdf.setTextColor(255, 255, 255)
    pdf.setFontSize(10)
    pdf.setFont('helvetica', 'bold')
    pdf.text((index + 1).toString(), margin + 8, yPosition + 8, { align: 'center' })
    
    pdf.setTextColor(0, 0, 0)
    pdf.setFontSize(14)
    pdf.setFont('helvetica', 'bold')
    pdf.text(beat.title, margin + 20, yPosition + 8)
    
    // Status and word count
    if (beat.completed && wordCount > 0) {
      pdf.setFontSize(9)
      pdf.setTextColor(100, 100, 100)
      pdf.text(`${wordCount} words`, pageWidth - margin, yPosition + 8, { align: 'right' })
    }
    
    yPosition += 18
    
    // Description
    pdf.setFontSize(10)
    pdf.setTextColor(80, 80, 80)
    pdf.setFont('helvetica', 'italic')
    const descLines = pdf.splitTextToSize(beat.description, contentWidth - 20)
    pdf.text(descLines, margin + 20, yPosition)
    yPosition += descLines.length * 5 + 8
    
    // Content
    pdf.setFont('helvetica', 'normal')
    pdf.setTextColor(0, 0, 0)
    if (beat.content) {
      const contentLines = pdf.splitTextToSize(beat.content, contentWidth - 20)
      pdf.text(contentLines, margin + 20, yPosition)
      yPosition += contentLines.length * 5
    } else {
      pdf.setTextColor(150, 150, 150)
      pdf.text('[This beat has not been written yet]', margin + 20, yPosition)
      yPosition += 5
    }
    
    yPosition += 15
    
    // Separator line
    if (index < story.beats.length - 1) {
      pdf.setDrawColor(220, 220, 220)
      pdf.line(margin + 20, yPosition, pageWidth - margin, yPosition)
      yPosition += 15
    }
  })
  
  addFooter()
  
  // Characters Section
  if (story.characters.length > 0) {
    checkPageBreak(60)
    yPosition += 20
    
    pdf.setFontSize(18)
    pdf.setFont('helvetica', 'bold')
    pdf.setTextColor(0, 0, 0)
    pdf.text('Character Profiles', margin, yPosition)
    yPosition += 25
    
    story.characters.forEach((char, index) => {
      checkPageBreak(40)
      
      // Character name
      pdf.setFontSize(12)
      pdf.setFont('helvetica', 'bold')
      pdf.text(char.name, margin, yPosition)
      
      // Role badge
      pdf.setFillColor(230, 230, 230)
      pdf.setDrawColor(200, 200, 200)
      const roleWidth = pdf.getTextWidth(char.role) + 8
      pdf.roundedRect(pageWidth - margin - roleWidth, yPosition - 8, roleWidth, 12, 2, 2, 'FD')
      pdf.setFontSize(9)
      pdf.setTextColor(80, 80, 80)
      pdf.text(char.role, pageWidth - margin - roleWidth + 4, yPosition - 2)
      
      yPosition += 15
      
      // Description
      pdf.setFontSize(10)
      pdf.setTextColor(0, 0, 0)
      pdf.setFont('helvetica', 'normal')
      const charLines = pdf.splitTextToSize(char.description, contentWidth)
      pdf.text(charLines, margin, yPosition)
      yPosition += charLines.length * 5 + 15
    })
    
    addFooter()
  }
  
  pdf.save(`${story.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_story.pdf`)
}
